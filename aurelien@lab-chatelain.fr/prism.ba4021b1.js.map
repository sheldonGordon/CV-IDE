{"version":3,"sources":["src/prism.js"],"names":["_self","window","WorkerGlobalScope","self","Prism","lang","uniqueId","plainTextGrammar","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","currentScript","document","Error","err","src","stack","scripts","getElementsByTagName","isActive","defaultActivation","no","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlightAll","async","highlightAllUnder","container","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","hasAttribute","setAttribute","Worker","worker","filename","onmessage","evt","data","postMessage","JSON","stringify","immediateClose","highlight","tokenize","rest","tokenList","LinkedList","toArray","addAfter","head","matchGrammar","startNode","startPos","rematch","patterns","j","length","cause","patternObj","lookbehind","greedy","pattern","global","flags","match","source","currentNode","next","pos","tail","reach","str","removeCount","matchPattern","index","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","array","node","push","all","name","callbacks","matchedStr","lastIndex","lookbehindLength","newNode","count","s","e","tag","classes","attributes","aliases","join","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","requestAnimationFrame","setTimeout","module","exports","markup","tagName","includedCdataInside","def","attrName","html","mathml","svg","xml","ssml","atom","rss","clike","envVars","commandAfterHeredoc","insideString","bash","entity","variable","toBeCopied","shell","keywords","classNamePrefix","java","function","namespace","PLUGIN_NAME","NEW_LINE_EXP","config","lineNumbers","getLine","number","lineNumberRows","querySelector","lineNumberStart","parseInt","getAttribute","lineNumberEnd","children","lineIndex","resize","resizeElements","assumeViewportIndependence","lastWidth","undefined","innerWidth","pre","parentNode","test","remove","lineNumbersWrapper","linesNum","lines","createElement","style","counterReset","appendChild","filter","codeStyles","whiteSpace","getStyles","getComputedStyle","currentStyle","infos","codeElement","lineNumberSizer","codeLines","split","display","oneLinerHeight","getBoundingClientRect","height","lineHeights","sizer","Boolean","info","line","childIndex","wrapper","lineNumber","CLASS_PATTERN","startsWith","indexOf","endsWith","suffix","len","substring","commandLine","getCommandLineInfo","complete","existingPrompt","numberOfLines","outputLines","outputSections","outputFilter","section","range","outputStart","outputEnd","isNaN","continuationLineIndicies","Set","lineContinuationStr","continuationFilter","l","hasCommandLineInfo","vars","promptLines","promptLine","rowCount","promptText","continuationPromptLine","has","prompt","removeAttribute","firstChild","defaultValue"],"mappings":";;AAijEA,IAAA,EAAA,UAAA,GA7iEIA,EAA2B,oBAAXC,OACjBA,OAE6B,oBAAtBC,mBAAqCC,gBAAgBD,kBAC1DC,KACA,GAWDC,EAAS,SAAUJ,GAGlBK,IAAAA,EAAO,0CACPC,EAAW,EAGXC,EAAmB,GAGnBC,EAAI,CAsBPC,OAAQT,EAAMI,OAASJ,EAAMI,MAAMK,OAsBnCC,4BAA6BV,EAAMI,OAASJ,EAAMI,MAAMM,4BAWxDC,KAAM,CACLC,OAAQ,SAASA,EAAOC,GACnBA,OAAAA,aAAkBC,EACd,IAAIA,EAAMD,EAAOE,KAAMH,EAAOC,EAAOG,SAAUH,EAAOI,OACnDC,MAAMC,QAAQN,GACjBA,EAAOO,IAAIR,GAEXC,EAAOQ,QAAQ,KAAM,SAASA,QAAQ,KAAM,QAAQA,QAAQ,UAAW,MAoBhFN,KAAM,SAAUO,GACRC,OAAAA,OAAOC,UAAUC,SAASC,KAAKJ,GAAGK,MAAM,GAAI,IASpDC,MAAO,SAAUC,GAITA,OAHFA,EAAG,MACPN,OAAOO,eAAeD,EAAK,OAAQ,CAAEE,QAASzB,IAExCuB,EAAG,MAaXG,MAAO,SAASC,EAAUX,EAAGY,GAGxBF,IAAAA,EAAWG,EACP3B,OAHR0B,EAAUA,GAAW,GAGb1B,EAAEG,KAAKI,KAAKO,IACd,IAAA,SAEAY,GADJC,EAAK3B,EAAEG,KAAKiB,MAAMN,GACdY,EAAQC,GACJD,OAAAA,EAAQC,GAKX,IAAA,IAAIC,KAHTJ,EAA4C,GAC5CE,EAAQC,GAAMH,EAEEV,EACXA,EAAEe,eAAeD,KACpBJ,EAAMI,GAAOH,EAAUX,EAAEc,GAAMF,IAINF,OAAAA,EAEvB,IAAA,QAEAE,OADJC,EAAK3B,EAAEG,KAAKiB,MAAMN,GACdY,EAAQC,GACJD,EAAQC,IAEhBH,EAAQ,GACRE,EAAQC,GAAMH,EAE2BV,EAAKgB,QAAQ,SAAUC,EAAGC,GAClER,EAAMQ,GAAKP,EAAUM,EAAGL,KAGEF,GAE5B,QACQV,OAAAA,IAYVmB,YAAa,SAAUC,GACfA,KAAAA,GAAS,CACXC,IAAAA,EAAItC,EAAKuC,KAAKF,EAAQG,WACtBF,GAAAA,EACIA,OAAAA,EAAE,GAAGG,cAEbJ,EAAUA,EAAQK,cAEZ,MAAA,QAURC,YAAa,SAAUN,EAASO,GAG/BP,EAAQG,UAAYH,EAAQG,UAAUxB,QAAQ6B,OAAO7C,EAAM,MAAO,IAIlEqC,EAAQS,UAAUC,IAAI,YAAcH,IAUrCI,cAAe,WACV,GAAoB,oBAAbC,SACH,OAAA,KAEJ,GAAA,kBAAmBA,SACKA,OAAAA,SAASD,cAOjC,IACG,MAAA,IAAIE,MACT,MAAOC,GAQJC,IAAAA,GAAO,qCAAqCb,KAAKY,EAAIE,QAAU,IAAI,GACnED,GAAAA,EAAK,CACJE,IAAAA,EAAUL,SAASM,qBAAqB,UACvC,IAAA,IAAIpB,KAAKmB,EACTA,GAAAA,EAAQnB,GAAGiB,KAAOA,EACdE,OAAAA,EAAQnB,GAIX,OAAA,OAuBTqB,SAAU,SAAUnB,EAASG,EAAWiB,GAGhCpB,IAFHqB,IAAAA,EAAK,MAAQlB,EAEVH,GAAS,CACXS,IAAAA,EAAYT,EAAQS,UACpBA,GAAAA,EAAUa,SAASnB,GACf,OAAA,EAEJM,GAAAA,EAAUa,SAASD,GACf,OAAA,EAERrB,EAAUA,EAAQK,cAEZ,QAAEe,IAWXG,UAAW,CAIVC,MAAO3D,EACP4D,UAAW5D,EACX6D,KAAM7D,EACN8D,IAAK9D,EA8BL+D,OAAQ,SAAUnC,EAAIoC,GACjBlE,IAAAA,EAAOG,EAAEG,KAAKqB,MAAMxB,EAAEyD,UAAU9B,IAE/B,IAAA,IAAIC,KAAOmC,EACflE,EAAK+B,GAAOmC,EAAMnC,GAGZ/B,OAAAA,GA8ERmE,aAAc,SAAUC,EAAQC,EAAQC,EAAQC,GAE3CC,IAAAA,GADJD,EAAOA,GAA4BpE,EAAEyD,WAClBQ,GAEfK,EAAM,GAEL,IAAA,IAAIC,KAASF,EACbA,GAAAA,EAAQxC,eAAe0C,GAAQ,CAE9BA,GAAAA,GAASL,EACP,IAAA,IAAIM,KAAYL,EAChBA,EAAOtC,eAAe2C,KACzBF,EAAIE,GAAYL,EAAOK,IAMrBL,EAAOtC,eAAe0C,KAC1BD,EAAIC,GAASF,EAAQE,IAKpBE,IAAAA,EAAML,EAAKH,GAURK,OATPF,EAAKH,GAAUK,EAGftE,EAAEyD,UAAUiB,IAAI1E,EAAEyD,UAAW,SAAU7B,EAAKL,GACvCA,IAAUkD,GAAO7C,GAAOqC,IACtBrC,KAAAA,GAAO0C,KAIPA,GAIRI,IAAK,SAASA,EAAI5D,EAAG6D,EAAUpE,EAAMmB,GACpCA,EAAUA,GAAW,GAEjBN,IAAAA,EAAQpB,EAAEG,KAAKiB,MAEd,IAAA,IAAIY,KAAKlB,EACTA,GAAAA,EAAEe,eAAeG,GAAI,CACxB2C,EAASzD,KAAKJ,EAAGkB,EAAGlB,EAAEkB,GAAIzB,GAAQyB,GAE9B4C,IAAAA,EAAW9D,EAAEkB,GACb6C,EAAe7E,EAAEG,KAAKI,KAAKqE,GAEV,WAAjBC,GAA8BnD,EAAQN,EAAMwD,IAGpB,UAAjBC,GAA6BnD,EAAQN,EAAMwD,MACrDlD,EAAQN,EAAMwD,KAAa,EAC3BF,EAAIE,EAAUD,EAAU3C,EAAGN,KAJ3BA,EAAQN,EAAMwD,KAAa,EAC3BF,EAAIE,EAAUD,EAAU,KAAMjD,OAUnCoD,QAAS,GAcTC,aAAc,SAAUC,EAAOL,GAC9B3E,EAAEiF,kBAAkBnC,SAAUkC,EAAOL,IAkBtCM,kBAAmB,SAAUC,EAAWF,EAAOL,GAC1CQ,IAAAA,EAAM,CACTR,SAAUA,EACVO,UAAWA,EACXE,SAAU,oGAGXpF,EAAEqF,MAAMC,IAAI,sBAAuBH,GAEnCA,EAAII,SAAW7E,MAAMM,UAAUG,MAAMqE,MAAML,EAAID,UAAUO,iBAAiBN,EAAIC,WAE9EpF,EAAEqF,MAAMC,IAAI,gCAAiCH,GAExC,IAAA,IAAWjD,EAAPF,EAAI,EAAaE,EAAUiD,EAAII,SAASvD,MAChDhC,EAAE0F,iBAAiBxD,GAAmB,IAAV8C,EAAgBG,EAAIR,WAgClDe,iBAAkB,SAAUxD,EAAS8C,EAAOL,GAEvClC,IAAAA,EAAWzC,EAAEG,KAAK8B,YAAYC,GAC9BmC,EAAUrE,EAAEyD,UAAUhB,GAG1BzC,EAAEG,KAAKqC,YAAYN,EAASO,GAGxBkD,IAAAA,EAASzD,EAAQK,cACjBoD,GAA4C,QAAlCA,EAAOC,SAAStD,eAC7BtC,EAAEG,KAAKqC,YAAYmD,EAAQlD,GAGxBoD,IAEAV,EAAM,CACTjD,QAASA,EACTO,SAAUA,EACV4B,QAASA,EACTwB,KANU3D,EAAQ4D,aASVC,SAAAA,EAAsBC,GAC9Bb,EAAIa,gBAAkBA,EAEtBhG,EAAEqF,MAAMC,IAAI,gBAAiBH,GAE7BA,EAAIjD,QAAQ+D,UAAYd,EAAIa,gBAE5BhG,EAAEqF,MAAMC,IAAI,kBAAmBH,GAC/BnF,EAAEqF,MAAMC,IAAI,WAAYH,GACxBR,GAAYA,EAASzD,KAAKiE,EAAIjD,SAW3B,GARJlC,EAAEqF,MAAMC,IAAI,sBAAuBH,IAGnCQ,EAASR,EAAIjD,QAAQK,gBAC2B,QAAlCoD,EAAOC,SAAStD,gBAA4BqD,EAAOO,aAAa,aAC7EP,EAAOQ,aAAa,WAAY,MAG5BhB,EAAIU,KAGR,OAFA7F,EAAEqF,MAAMC,IAAI,WAAYH,QACxBR,GAAYA,EAASzD,KAAKiE,EAAIjD,UAM3B,GAFJlC,EAAEqF,MAAMC,IAAI,mBAAoBH,GAE3BA,EAAId,QAKLW,GAAAA,GAASxF,EAAM4G,OAAQ,CACtBC,IAAAA,EAAS,IAAID,OAAOpG,EAAEsG,UAE1BD,EAAOE,UAAY,SAAUC,GAC5BT,EAAsBS,EAAIC,OAG3BJ,EAAOK,YAAYC,KAAKC,UAAU,CACjCnE,SAAU0C,EAAI1C,SACdoD,KAAMV,EAAIU,KACVgB,gBAAgB,UAGjBd,EAAsB/F,EAAE8G,UAAU3B,EAAIU,KAAMV,EAAId,QAASc,EAAI1C,gBAjB7DsD,EAAsB/F,EAAEG,KAAKC,OAAO+E,EAAIU,QAyC1CiB,UAAW,SAAUlD,EAAMS,EAAS5B,GAC/B0C,IAAAA,EAAM,CACTU,KAAMjC,EACNS,QAASA,EACT5B,SAAUA,GAGP,GADJzC,EAAEqF,MAAMC,IAAI,kBAAmBH,IAC1BA,EAAId,QACF,MAAA,IAAItB,MAAM,iBAAmBoC,EAAI1C,SAAW,qBAI5CnC,OAFP6E,EAAI9E,OAASL,EAAE+G,SAAS5B,EAAIU,KAAMV,EAAId,SACtCrE,EAAEqF,MAAMC,IAAI,iBAAkBH,GACvB7E,EAAMsG,UAAU5G,EAAEG,KAAKC,OAAO+E,EAAI9E,QAAS8E,EAAI1C,WA2BvDsE,SAAU,SAAUnD,EAAMS,GACrB2C,IAAAA,EAAO3C,EAAQ2C,KACfA,GAAAA,EAAM,CACJ,IAAA,IAAIzC,KAASyC,EACjB3C,EAAQE,GAASyC,EAAKzC,UAGhBF,EAAQ2C,KAGZC,IAAAA,EAAY,IAAIC,EAKbC,OAJPC,EAASH,EAAWA,EAAUI,KAAMzD,GAmN7B0D,SAAAA,EAAa1D,EAAMqD,EAAW5C,EAASkD,EAAWC,EAAUC,GAC/D,IAAA,IAAIlD,KAASF,EACb,GAACA,EAAQxC,eAAe0C,IAAWF,EAAQE,GAA3C,CAIAmD,IAAAA,EAAWrD,EAAQE,GACvBmD,EAAWhH,MAAMC,QAAQ+G,GAAYA,EAAW,CAACA,GAE5C,IAAA,IAAIC,EAAI,EAAGA,EAAID,EAASE,SAAUD,EAAG,CACrCF,GAAAA,GAAWA,EAAQI,OAAStD,EAAQ,IAAMoD,EAC7C,OAGGG,IAAAA,EAAaJ,EAASC,GACtB1D,EAAS6D,EAAW7D,OACpB8D,IAAeD,EAAWC,WAC1BC,IAAWF,EAAWE,OACtBvH,EAAQqH,EAAWrH,MAEnBuH,GAAAA,IAAWF,EAAWG,QAAQC,OAAQ,CAErCC,IAAAA,EAAQL,EAAWG,QAAQhH,WAAWmH,MAAM,aAAa,GAC7DN,EAAWG,QAAUvF,OAAOoF,EAAWG,QAAQI,OAAQF,EAAQ,KAM1D,IAFFF,IAAAA,EAAUH,EAAWG,SAAWH,EAG/BQ,EAAcf,EAAUgB,KAAMC,EAAMhB,EACxCc,IAAgBrB,EAAUwB,QAItBhB,GAAWe,GAAOf,EAAQiB,OAH9BF,GAAOF,EAAY/G,MAAMqG,OAAQU,EAAcA,EAAYC,KAC1D,CAMGI,IAAAA,EAAML,EAAY/G,MAElB0F,GAAAA,EAAUW,OAAShE,EAAKgE,OAE3B,OAGGe,KAAAA,aAAerI,GAAfqI,CAIAC,IACAR,EADAQ,EAAc,EAGdZ,GAAAA,EAAQ,CAEP,KADJI,EAAQS,EAAaZ,EAASO,EAAK5E,EAAMmE,KAC3BK,EAAMU,OAASlF,EAAKgE,OACjC,MAGGmB,IAAAA,EAAOX,EAAMU,MACbE,EAAKZ,EAAMU,MAAQV,EAAM,GAAGR,OAC5BqB,EAAIT,EAIDO,IADPE,GAAKX,EAAY/G,MAAMqG,OAChBmB,GAAQE,GACdX,EAAcA,EAAYC,KAC1BU,GAAKX,EAAY/G,MAAMqG,OAOpBU,GAJJW,GAAKX,EAAY/G,MAAMqG,OACvBY,EAAMS,EAGFX,EAAY/G,iBAAiBjB,EAChC,SAKA,IAAA,IAAI4I,EAAIZ,EACRY,IAAMjC,EAAUwB,OAASQ,EAAID,GAAyB,iBAAZE,EAAE3H,OAC5C2H,EAAIA,EAAEX,KAENK,IACAK,GAAKC,EAAE3H,MAAMqG,OAEdgB,IAGAD,EAAM/E,EAAKzC,MAAMqH,EAAKS,GACtBb,EAAMU,OAASN,OAGX,KADJJ,EAAQS,EAAaZ,EAAS,EAAGU,EAAKZ,IAErC,SAKEgB,IAAAA,EAAOX,EAAMU,MACbK,EAAWf,EAAM,GACjBlE,EAASyE,EAAIxH,MAAM,EAAG4H,GACtBK,EAAQT,EAAIxH,MAAM4H,EAAOI,EAASvB,QAElCc,EAAQF,EAAMG,EAAIf,OAClBH,GAAWiB,EAAQjB,EAAQiB,QAC9BjB,EAAQiB,MAAQA,GAGbW,IAAAA,EAAaf,EAAYgB,KAEzBpF,IACHmF,EAAajC,EAASH,EAAWoC,EAAYnF,GAC7CsE,GAAOtE,EAAO0D,QAGf2B,EAAYtC,EAAWoC,EAAYT,GAE/BY,IAAAA,EAAU,IAAIlJ,EAAMiE,EAAON,EAASjE,EAAE+G,SAASoC,EAAUlF,GAAUkF,EAAU1I,EAAO0I,GAOpFP,GANJN,EAAclB,EAASH,EAAWoC,EAAYG,GAE1CJ,GACHhC,EAASH,EAAWqB,EAAac,GAG9BR,EAAc,EAAG,CAKhBa,IAAAA,EAAgB,CACnB5B,MAAOtD,EAAQ,IAAMoD,EACrBe,MAAOA,GAERpB,EAAa1D,EAAMqD,EAAW5C,EAASiE,EAAYgB,KAAMd,EAAKiB,GAG1DhC,GAAWgC,EAAcf,MAAQjB,EAAQiB,QAC5CjB,EAAQiB,MAAQe,EAAcf,YA5VlCpB,CAAa1D,EAAMqD,EAAW5C,EAAS4C,EAAUI,KAAM,GAyahDF,SAAQuC,GACZC,IAAAA,EAAQ,GACRC,EAAOF,EAAKrC,KAAKkB,KACdqB,KAAAA,IAASF,EAAKjB,MACpBkB,EAAME,KAAKD,EAAKrI,OAChBqI,EAAOA,EAAKrB,KAENoB,OAAAA,EA9aCxC,CAAQF,IAQhB5B,MAAO,CACNyE,IAAK,GAcLlH,IAAK,SAAUmH,EAAMpF,GAChBU,IAAAA,EAAQrF,EAAEqF,MAAMyE,IAEpBzE,EAAM0E,GAAQ1E,EAAM0E,IAAS,GAE7B1E,EAAM0E,GAAMF,KAAKlF,IAYlBW,IAAK,SAAUyE,EAAM5E,GAChB6E,IAAAA,EAAYhK,EAAEqF,MAAMyE,IAAIC,GAExB,GAACC,GAAcA,EAAUpC,OAIxB,IAAA,IAAWjD,EAAP3C,EAAI,EAAc2C,EAAWqF,EAAUhI,MAC/C2C,EAASQ,KAKZ7E,MAAOA,GAqBCA,SAAAA,EAAMC,EAAMC,EAASC,EAAOwJ,GAU/B1J,KAAAA,KAAOA,EASPC,KAAAA,QAAUA,EAQVC,KAAAA,MAAQA,EAERmH,KAAAA,OAAqC,GAA3BqC,GAAc,IAAIrC,OA8EzBiB,SAAAA,EAAaZ,EAASO,EAAK5E,EAAMmE,GACzCE,EAAQiC,UAAY1B,EAChBJ,IAAAA,EAAQH,EAAQ7F,KAAKwB,GACrBwE,GAAAA,GAASL,GAAcK,EAAM,GAAI,CAEhC+B,IAAAA,EAAmB/B,EAAM,GAAGR,OAChCQ,EAAMU,OAASqB,EACf/B,EAAM,GAAKA,EAAM,GAAGjH,MAAMgJ,GAEpB/B,OAAAA,EAiLClB,SAAAA,IAEJG,IAAAA,EAAO,CAAE9F,MAAO,KAAM+H,KAAM,KAAMf,KAAM,MAExCE,EAAO,CAAElH,MAAO,KAAM+H,KAAMjC,EAAMkB,KAAM,MAC5ClB,EAAKkB,KAAOE,EAGPpB,KAAAA,KAAOA,EAEPoB,KAAAA,KAAOA,EACPb,KAAAA,OAAS,EAYNR,SAAAA,EAASsC,EAAME,EAAMrI,GAEzBgH,IAAAA,EAAOqB,EAAKrB,KAEZ6B,EAAU,CAAE7I,MAAOA,EAAO+H,KAAMM,EAAMrB,KAAMA,GAKzC6B,OAJPR,EAAKrB,KAAO6B,EACZ7B,EAAKe,KAAOc,EACZV,EAAK9B,SAEEwC,EAUCb,SAAAA,EAAYG,EAAME,EAAMS,GAE3B,IADD9B,IAAAA,EAAOqB,EAAKrB,KACPvG,EAAI,EAAGA,EAAIqI,GAAS9B,IAASmB,EAAKjB,KAAMzG,IAChDuG,EAAOA,EAAKA,KAEbqB,EAAKrB,KAAOA,EACZA,EAAKe,KAAOM,EACZF,EAAK9B,QAAU5F,EAkBZ,GA3XJxC,EAAMI,MAAQI,EA+EdM,EAAMsG,UAAY,SAASA,EAAU9F,EAAG2B,GACnC,GAAY,iBAAL3B,EACHA,OAAAA,EAEJJ,GAAAA,MAAMC,QAAQG,GAAI,CACjBwJ,IAAAA,EAAI,GAIDA,OAHPxJ,EAAEgB,QAAQ,SAAUyI,GACnBD,GAAK1D,EAAU2D,EAAG9H,KAEZ6H,EAGJnF,IAAAA,EAAM,CACT5E,KAAMO,EAAEP,KACRC,QAASoG,EAAU9F,EAAEN,QAASiC,GAC9B+H,IAAK,OACLC,QAAS,CAAC,QAAS3J,EAAEP,MACrBmK,WAAY,GACZjI,SAAUA,GAGPkI,EAAU7J,EAAEL,MACZkK,IACCjK,MAAMC,QAAQgK,GACjBjK,MAAMM,UAAU6I,KAAKrE,MAAML,EAAIsF,QAASE,GAExCxF,EAAIsF,QAAQZ,KAAKc,IAInB3K,EAAEqF,MAAMC,IAAI,OAAQH,GAEhBuF,IAAAA,EAAa,GACZ,IAAA,IAAIX,KAAQ5E,EAAIuF,WACpBA,GAAc,IAAMX,EAAO,MAAQ5E,EAAIuF,WAAWX,IAAS,IAAIlJ,QAAQ,KAAM,UAAY,IAGnF,MAAA,IAAMsE,EAAIqF,IAAM,WAAarF,EAAIsF,QAAQG,KAAK,KAAO,IAAMF,EAAa,IAAMvF,EAAI3E,QAAU,KAAO2E,EAAIqF,IAAM,MAuQhHhL,EAAMsD,SACN,OAACtD,EAAMqL,kBAKN7K,EAAEE,6BAENV,EAAMqL,iBAAiB,UAAW,SAAUrE,GACvCsE,IAAAA,EAAUnE,KAAKoE,MAAMvE,EAAIC,MACzB5G,EAAOiL,EAAQrI,SACfoD,EAAOiF,EAAQjF,KACfgB,EAAiBiE,EAAQjE,eAE7BrH,EAAMkH,YAAY1G,EAAE8G,UAAUjB,EAAM7F,EAAEyD,UAAU5D,GAAOA,IACnDgH,GACHrH,EAAMwL,UAEL,GAGGhL,GAlBCA,EAsBLiL,IAAAA,EAASjL,EAAEG,KAAK0C,gBAUXqI,SAAAA,IACHlL,EAAEC,QACND,EAAE+E,eAIA,GAdAkG,IACHjL,EAAEsG,SAAW2E,EAAOhI,IAEhBgI,EAAO/E,aAAa,iBACvBlG,EAAEC,QAAS,KAURD,EAAEC,OAAQ,CAOVkL,IAAAA,EAAarI,SAASqI,WACP,YAAfA,GAA2C,gBAAfA,GAAgCF,GAAUA,EAAOG,MAChFtI,SAAS+H,iBAAiB,mBAAoBK,GAE1CzL,OAAO4L,sBACV5L,OAAO4L,sBAAsBH,GAE7BzL,OAAO6L,WAAWJ,EAAgC,IAK9ClL,OAAAA,EAhqCK,CAkqCXR,GAEoB,oBAAX+L,QAA0BA,OAAOC,UAC3CD,OAAOC,QAAU5L,QAII,IAAXsI,IACVA,EAAOtI,MAAQA,GAoDhBA,EAAM6D,UAAUgI,OAAS,CACb,QAAA,CACVxD,QAAS,8BACTD,QAAQ,GAEC,OAAA,CACTC,QAAS,iBACTD,QAAQ,GAEE,QAAA,CAEVC,QAAS,uHACTD,QAAQ,EACR/D,OAAQ,CACY,kBAAA,CAClBgE,QAAS,6BACTF,YAAY,EACZC,QAAQ,EACR/D,OAAQ,MAEC,OAAA,CACTgE,QAAS,kBACTD,QAAQ,GAEM,YAAA,eACA,cAAA,YACP,KAAA,eAGD,MAAA,CACRC,QAAS,4BACTD,QAAQ,GAEF,IAAA,CACNC,QAAS,uHACTD,QAAQ,EACR/D,OAAQ,CACA,IAAA,CACNgE,QAAS,iBACThE,OAAQ,CACQ,YAAA,QACF,UAAA,iBAGC,eAAA,GACF,aAAA,CACbgE,QAAS,qCACThE,OAAQ,CACQ,YAAA,CACd,CACCgE,QAAS,KACTxH,MAAO,eAER,CACCwH,QAAS,mBACTF,YAAY,MAKD,YAAA,OACF,YAAA,CACZE,QAAS,YACThE,OAAQ,CACM,UAAA,mBAMP,OAAA,CACT,CACCgE,QAAS,kBACTxH,MAAO,gBAER,uBAIFb,EAAM6D,UAAUgI,OAAhB,IAA8BxH,OAAO,cAAcA,OAAnD,OACCrE,EAAM6D,UAAUgI,OAAhB,OACD7L,EAAM6D,UAAUgI,OAAhB,QAAkCxH,OAAO,mBAAmBA,OAASrE,EAAM6D,UAAUgI,OAGrF7L,EAAMyF,MAAMzC,IAAI,OAAQ,SAAUuC,GAEhB,WAAbA,EAAI5E,OACP4E,EAAIuF,WAAJ,MAA0BvF,EAAI3E,QAAQK,QAAQ,QAAS,QAIzDE,OAAOO,eAAe1B,EAAM6D,UAAUgI,OAAOjB,IAAK,aAAc,CAY/DjJ,MAAO,SAAoBmK,EAAS7L,GAC/B8L,IAAAA,EAAsB,GAC1BA,EAAoB,YAAc9L,GAAQ,CACzCoI,QAAS,oCACTF,YAAY,EACZ9D,OAAQrE,EAAM6D,UAAU5D,IAEzB8L,EAAmB,MAAY,uBAE3B1H,IAAAA,EAAS,CACM,iBAAA,CACjBgE,QAAS,4BACThE,OAAQ0H,IAGV1H,EAAO,YAAcpE,GAAQ,CAC5BoI,QAAS,UACThE,OAAQrE,EAAM6D,UAAU5D,IAGrB+L,IAAAA,EAAM,GACVA,EAAIF,GAAW,CACdzD,QAASvF,OAAO,wFAAwF2F,OAAOxH,QAAQ,MAAO,WAAqB6K,OAAAA,IAAa,KAChK3D,YAAY,EACZC,QAAQ,EACR/D,OAAQA,GAGTrE,EAAM6D,UAAUO,aAAa,SAAU,QAAS4H,MAGlD7K,OAAOO,eAAe1B,EAAM6D,UAAUgI,OAAOjB,IAAK,eAAgB,CAYjEjJ,MAAO,SAAUsK,EAAUhM,GAC1BD,EAAM6D,UAAUgI,OAAOjB,IAAIvG,OAAO,gBAAgB4F,KAAK,CACtD5B,QAASvF,OACR,aAAa2F,OAAS,MAAQwD,EAAW,IAAM,iDAAiDxD,OAChG,KAEDN,YAAY,EACZ9D,OAAQ,CACM,YAAA,WACC,aAAA,CACbgE,QAAS,WACThE,OAAQ,CACE,MAAA,CACRgE,QAAS,yCACTF,YAAY,EACZtH,MAAO,CAACZ,EAAM,YAAcA,GAC5BoE,OAAQrE,EAAM6D,UAAU5D,IAEV,YAAA,CACd,CACCoI,QAAS,KACTxH,MAAO,eAER,eASPb,EAAM6D,UAAUqI,KAAOlM,EAAM6D,UAAUgI,OACvC7L,EAAM6D,UAAUsI,OAASnM,EAAM6D,UAAUgI,OACzC7L,EAAM6D,UAAUuI,IAAMpM,EAAM6D,UAAUgI,OAEtC7L,EAAM6D,UAAUwI,IAAMrM,EAAM6D,UAAUK,OAAO,SAAU,IACvDlE,EAAM6D,UAAUyI,KAAOtM,EAAM6D,UAAUwI,IACvCrM,EAAM6D,UAAU0I,KAAOvM,EAAM6D,UAAUwI,IACvCrM,EAAM6D,UAAU2I,IAAMxM,EAAM6D,UAAUwI,IAEtCrM,EAAM6D,UAAU4I,MAAQ,CACZ,QAAA,CACV,CACCpE,QAAS,kCACTF,YAAY,EACZC,QAAQ,GAET,CACCC,QAAS,mBACTF,YAAY,EACZC,QAAQ,IAGA,OAAA,CACTC,QAAS,iDACTD,QAAQ,GAEK,aAAA,CACbC,QAAS,2FACTF,YAAY,EACZ9D,OAAQ,CACQ,YAAA,UAGN,QAAA,6GACA,QAAA,qBACC,SAAA,cACF,OAAA,4DACE,SAAA,+CACG,YAAA,iBAGf,SAAUrE,GAKN0M,IAAAA,EAAU,0oCAEVC,EAAsB,CACzBtE,QAAS,4BACTF,YAAY,EACZtH,MAAO,cACPwD,OAAQ,MAGLuI,EAAe,CACVD,KAAAA,EACO,YAAA,CACdtE,QAASvF,OAAO,MAAQ4J,GACxB7L,MAAO,YAEI,SAAA,CAEX,CACCwH,QAAS,sBACTD,QAAQ,EACR/D,OAAQ,CAEK,SAAA,CACX,CACCgE,QAAS,uBACTF,YAAY,GAEb,WAES,OAAA,8DAEE,SAAA,2DAEG,YAAA,oBAIjB,CACCE,QAAS,qCACTD,QAAQ,EACR/D,OAAQ,CACK,SAAA,oBAId,CACCgE,QAAS,cACTD,QAAQ,EACR/D,OAAQ,CACK,SAAA,mCACG,YAAA,SACA,YAAA,CACdgE,QAASvF,OAAO,QAAU4J,GAC1BvE,YAAY,EACZtH,MAAO,cAIV,sBAGS,OAAA,wFAGXb,EAAM6D,UAAUgJ,KAAO,CACX,QAAA,CACVxE,QAAS,aACTxH,MAAO,aAEG,QAAA,CACVwH,QAAS,kBACTF,YAAY,GAEI,gBAAA,CAKhB,CAECE,QAAS,kDACTF,YAAY,EACZtH,MAAO,YAER,CAECwH,QAAS,8BACTxH,MAAO,aAIQ,gBAAA,CAChBwH,QAAS,sCACTxH,MAAO,WACPsH,YAAY,GAIE,cAAA,CACdE,QAAS,0CACThE,OAAQ,CACQ,YAAA,CACdgE,QAASvF,OAAO,uBAAyB4J,GACzCvE,YAAY,EACZtH,MAAO,aAGTA,MAAO,WACPsH,YAAY,GAGA,UAAA,CACZE,QAAS,qDACTxH,MAAO,WACPsH,YAAY,GAEH,OAAA,CAET,CACCE,QAAS,mDACTF,YAAY,EACZC,QAAQ,EACR/D,OAAQuI,GAIT,CACCvE,QAAS,2DACTF,YAAY,EACZC,QAAQ,EACR/D,OAAQ,CACCsI,KAAAA,IAIV,CAECtE,QAAS,0EACTF,YAAY,EACZC,QAAQ,EACR/D,OAAQuI,GAET,CAECvE,QAAS,oBACTF,YAAY,EACZC,QAAQ,GAET,CAECC,QAAS,2BACTD,QAAQ,EACR/D,OAAQ,CACGuI,OAAAA,EAAaE,UAIX,YAAA,CACdzE,QAASvF,OAAO,OAAS4J,GACzB7L,MAAO,YAEI+L,SAAAA,EAAaG,SACb,SAAA,CACX1E,QAAS,6kDACTF,YAAY,GAEF,QAAA,CACVE,QAAS,gHACTF,YAAY,GAGF,QAAA,CACVE,QAAS,6SACTF,YAAY,EAEZtH,MAAO,cAEG,QAAA,CACVwH,QAAS,iDACTF,YAAY,GAEM,kBAAA,CAClBE,QAAS,UACTxH,MAAO,aAEI,SAAA,CAEXwH,QAAS,8EACThE,OAAQ,CACY,kBAAA,CAClBgE,QAAS,MACTxH,MAAO,eAIK,YAAA,iCACL,OAAA,CACTwH,QAAS,qCACTF,YAAY,IAIdwE,EAAoBtI,OAASrE,EAAM6D,UAAUgJ,KAqBxC,IAlBDG,IAAAA,EAAa,CAChB,UACA,gBACA,gBACA,cACA,YACA,SACA,cACA,WACA,UACA,UACA,UACA,kBACA,WACA,cACA,UAEG3I,EAASuI,EAAaG,SAAS,GAAG1I,OAC7BjC,EAAI,EAAGA,EAAI4K,EAAWhF,OAAQ5F,IACtCiC,EAAO2I,EAAW5K,IAAMpC,EAAM6D,UAAUgJ,KAAKG,EAAW5K,IAGzDpC,EAAM6D,UAAUoJ,MAAQjN,EAAM6D,UAAUgJ,KAxOxC,CAyOC7M,GAED,SAAUA,GAENkN,IAAAA,EAAW,mfAGXC,EAAkB,6CAA6C1E,OAG/DhG,EAAY,CACf4F,QAASvF,OAAO,aAAa2F,OAAS0E,EAAkB,gCAAgC1E,QACxFN,YAAY,EACZ9D,OAAQ,CACM,UAAA,CACZgE,QAAS,2CACThE,OAAQ,CACQ,YAAA,OAGF,YAAA,OAIjBrE,EAAM6D,UAAUuJ,KAAOpN,EAAM6D,UAAUK,OAAO,QAAS,CAC5C,OAAA,CACTmE,QAAS,iCACTF,YAAY,EACZC,QAAQ,GAEK,aAAA,CACb3F,EACA,CAGC4F,QAASvF,OAAO,aAAa2F,OAAS0E,EAAkB,+DAA+D1E,QACvHN,YAAY,EACZ9D,OAAQ5B,EAAU4B,QAEnB,CAGCgE,QAASvF,OAAO,kFAAkF2F,OAAS0E,EAAkB,aAAa1E,QAC1IN,YAAY,EACZ9D,OAAQ5B,EAAU4B,SAGT6I,QAAAA,EACC,SAAA,CACXlN,EAAM6D,UAAU4I,MAAMY,SACtB,CACChF,QAAS,mBACTF,YAAY,IAGJ,OAAA,8IACE,SAAA,CACXE,QAAS,wEACTF,YAAY,KAIdnI,EAAM6D,UAAUO,aAAa,OAAQ,SAAU,CACtB,uBAAA,CAEvBiE,QAAS,iDACTD,QAAQ,EACRvH,MAAO,UAEA,KAAA,CACPwH,QAAS,4BACTD,QAAQ,KAIVpI,EAAM6D,UAAUO,aAAa,OAAQ,aAAc,CACpC,WAAA,CACbiE,QAAS,+BACTF,YAAY,EACZtH,MAAO,eAEI,SAAA,CACXwH,QAAS,kGACThE,OAAQ,CACO5B,aAAAA,EACHyK,QAAAA,EACI,YAAA,YACH,SAAA,UAGJ,OAAA,CACT,CACC7E,QAASvF,OAAO,gBAAgB2F,OAAS0E,EAAkB,0BAA0B1E,QACrFN,YAAY,EACZ9D,OAAQ,CACM5B,UAAAA,EAAU4B,OAAOiJ,UACf,YAAA,KACH,SAAA,KACE,aAAA,QAGhB,CACCjF,QAASvF,OAAO,yBAAyB2F,OAAS0E,EAAkB,qBAAqB1E,QACzFN,YAAY,EACZtH,MAAO,SACPwD,OAAQ,CACM5B,UAAAA,EAAU4B,OAAOiJ,UACpB,OAAA,SACK,YAAA,KACH,SAAA,KACE,aAAA,SAIJ,UAAA,CACZjF,QAASvF,OACR,qJACE2F,OAAOxH,QAAQ,aAAc,WAAqBiM,OAAAA,EAASzE,UAC9DN,YAAY,EACZ9D,OAAQ,CACQ,YAAA,SAtHlB,CA0HCrE,GAED,WAEI,QAAiB,IAAVA,GAA6C,oBAAbkD,SAAvC,CASAqK,IAOAC,EAAe,WAMfC,EAASzN,EAAMkF,QAAQwI,YAAc,CAQxCC,QAAS,SAAUrL,EAASsL,GACvBtL,GAAoB,QAApBA,EAAQwJ,SAAsBxJ,EAAQS,UAAUa,SAtBpC,gBAsBZtB,CAIAuL,IAAAA,EAAiBvL,EAAQwL,cAAc,sBACvC,GAACD,EAAD,CAGAE,IAAAA,EAAkBC,SAAS1L,EAAQ2L,aAAa,cAAe,KAAO,EACtEC,EAAgBH,GAAmBF,EAAeM,SAASnG,OAAS,GAEpE4F,EAASG,IACZH,EAASG,GAENH,EAASM,IACZN,EAASM,GAGNE,IAAAA,EAAYR,EAASG,EAElBF,OAAAA,EAAeM,SAASC,MAWhCC,OAAQ,SAAU/L,GACjBgM,EAAe,CAAChM,KAajBiM,4BAA4B,GA4GzBC,OAAYC,EAChB5O,OAAOoL,iBAAiB,SAAU,WAC7BwC,EAAOc,4BAA8BC,IAAc3O,OAAO6O,aAG9DF,EAAY3O,OAAO6O,WAEnBJ,EAAexN,MAAMM,UAAUG,MAAMD,KAAK4B,SAAS2C,iBAAiB,yBAGrE7F,EAAMyF,MAAMzC,IAAI,WAAY,SAAUuC,GACjC,GAACA,EAAIU,KAAL,CAIAA,IAAAA,EAA+BV,EAAIjD,QACnCqM,EAAkC1I,EAAK2I,WAGvC,GAACD,GAAQ,OAAOE,KAAKF,EAAI3I,YAKzBC,EAAK6H,cAAc,uBAKlB9N,EAAMO,KAAKkD,SAASwC,EA5MR,gBA4Mb,CAKJA,EAAKlD,UAAU+L,OAjNE,gBAmNjBH,EAAI5L,UAAUC,IAnNG,gBAqNbwF,IAEAuG,EAFAvG,EAAQjD,EAAIU,KAAKuC,MAAMgF,GACvBwB,EAAWxG,EAAQA,EAAMR,OAAS,EAAI,EAGtCiH,EAAQ,IAAInO,MAAMkO,EAAW,GAAGhE,KAAK,kBAEzC+D,EAAqB7L,SAASgM,cAAc,SACzB3I,aAAa,cAAe,QAC/CwI,EAAmBtM,UAAY,oBAC/BsM,EAAmB1I,UAAY4I,EAE3BN,EAAIrI,aAAa,gBACpBqI,EAAIQ,MAAMC,aAAe,eAAiBpB,SAASW,EAAIV,aAAa,cAAe,IAAM,IAG1F1I,EAAIjD,QAAQ+M,YAAYN,GAExBT,EAAe,CAACK,IAEhB3O,EAAMyF,MAAMC,IAAI,eAAgBH,OAGjCvF,EAAMyF,MAAMzC,IAAI,eAAgB,SAAUuC,GACzCA,EAAIL,QAAUK,EAAIL,SAAW,GAC7BK,EAAIL,QAAQwI,aAAc,IAlKlBY,SAAAA,EAAe3I,GAOnBA,GAAmB,IANvBA,EAAWA,EAAS2J,OAAO,SAAU3E,GAChC4E,IACAC,EAyFGC,SAAUnN,GACd,IAACA,EACG,OAAA,KAGDzC,OAAAA,OAAO6P,iBAAmBA,iBAAiBpN,GAAYA,EAAQqN,cAAgB,KA/FpEF,CAAU9E,GACC,eACrB6E,MAAe,aAAfA,GAA4C,aAAfA,KAGxBxH,OAATrC,CAIAiK,IAAAA,EAAQjK,EAAS3E,IAAI,SAAUsB,GAC9BuN,IAAAA,EAAcvN,EAAQwL,cAAc,QACpCiB,EAAqBzM,EAAQwL,cAAc,sBAC3C,GAAC+B,GAAgBd,EAAjB,CAKAe,IAAAA,EAAkBxN,EAAQwL,cAAc,uBACxCiC,EAAYF,EAAY3J,YAAY8J,MAAMxC,GAEzCsC,KACJA,EAAkB5M,SAASgM,cAAc,SACzBzM,UAAY,qBAE5BoN,EAAYR,YAAYS,IAGzBA,EAAgBzJ,UAAY,IAC5ByJ,EAAgBX,MAAMc,QAAU,QAE5BC,IAAAA,EAAiBJ,EAAgBK,wBAAwBC,OAGtD,OAFPN,EAAgBzJ,UAAY,GAErB,CACN/D,QAASA,EACT2M,MAAOc,EACPM,YAAa,GACbH,eAAgBA,EAChBI,MAAOR,MAENR,OAAOiB,SAEVX,EAAM1N,QAAQ,SAAUsO,GACnBV,IAAAA,EAAkBU,EAAKF,MACvBrB,EAAQuB,EAAKvB,MACboB,EAAcG,EAAKH,YACnBH,EAAiBM,EAAKN,eAE1BG,EAAYpB,EAAMjH,OAAS,QAAKyG,EAChCQ,EAAM/M,QAAQ,SAAUuO,EAAMvH,GACzBuH,GAAAA,GAAQA,EAAKzI,OAAS,EAAG,CACxB2C,IAAAA,EAAImF,EAAgBT,YAAYnM,SAASgM,cAAc,SAC3DvE,EAAEwE,MAAMc,QAAU,QAClBtF,EAAEzE,YAAcuK,OAEhBJ,EAAYnH,GAASgH,MAKxBN,EAAM1N,QAAQ,SAAUsO,GAKlB,IAJDV,IAAAA,EAAkBU,EAAKF,MACvBD,EAAcG,EAAKH,YAEnBK,EAAa,EACRtO,EAAI,EAAGA,EAAIiO,EAAYrI,OAAQ5F,SAChBqM,IAAnB4B,EAAYjO,KACfiO,EAAYjO,GAAK0N,EAAgB3B,SAASuC,KAAcP,wBAAwBC,UAKnFR,EAAM1N,QAAQ,SAAUsO,GACnBV,IAAAA,EAAkBU,EAAKF,MACvBK,EAAUH,EAAKlO,QAAQwL,cAAc,sBAEzCgC,EAAgBX,MAAMc,QAAU,OAChCH,EAAgBzJ,UAAY,GAE5BmK,EAAKH,YAAYnO,QAAQ,SAAUkO,EAAQQ,GAC1CD,EAAQxC,SAASyC,GAAYzB,MAAMiB,OAASA,EAAS,WAxKxD,GA6PA,WAEI,QAAiB,IAAVpQ,GAA6C,oBAAbkD,SAAvC,CAIA2N,IAAAA,EAAgB,+BAIhBC,EAAa,GAAGA,WACjB,SAAUpG,EAAGrB,GAAYqB,OAAAA,EAAEoG,WAAWzH,IACtC,SAAUqB,EAAGrB,GAAYqB,OAAiB,IAAjBA,EAAEqG,QAAQ1H,IAIlC2H,EAAW,GAAGA,SACf,SAAUjI,EAAKkI,GACTlI,OAAAA,EAAIiI,SAASC,IAEnB,SAAUlI,EAAKkI,GACZC,IAAAA,EAAMnI,EAAIf,OACPe,OAAAA,EAAIoI,UAAUD,EAAMD,EAAOjJ,OAAQkJ,KAASD,GA8BrDjR,EAAMyF,MAAMzC,IAAI,mBAAoB,SAAUuC,GACzC6L,IAAAA,EAAcC,EAAmB9L,GAEjC6L,IAAAA,EAAYE,UAAa/L,EAAIU,KAA7BmL,CAMAzC,IAAAA,EAAMpJ,EAAIjD,QAAQK,cAClB,GAACgM,GAAQ,OAAOE,KAAKF,EAAI3I,YAC1B6K,EAAchC,KAAKF,EAAIlM,YAAeoO,EAAchC,KAAKtJ,EAAIjD,QAAQG,YADpE,CAOA8O,IAAAA,EAAiBhM,EAAIjD,QAAQwL,cAAc,wBAC3CyD,GACHA,EAAezC,SAGZiB,IAAAA,EAAYxK,EAAIU,KAAK+J,MAAM,MAE/BoB,EAAYI,cAAgBzB,EAAU/H,OAElCyJ,IAAAA,EAAcL,EAAYK,YAAc,GAExCC,EAAiB/C,EAAIV,aAAa,eAClC0D,EAAehD,EAAIV,aAAa,sBAChCyD,GAAmB,OAAnBA,EACHA,EAAe1B,MAAM,KAAK9N,QAAQ,SAAU0P,GACvCC,IAAAA,EAAQD,EAAQ5B,MAAM,KACtB8B,EAAc9D,SAAS6D,EAAM,GAAI,IACjCE,EAA6B,IAAjBF,EAAM7J,OAAegG,SAAS6D,EAAM,GAAI,IAAMC,EAE1D,IAACE,MAAMF,KAAiBE,MAAMD,GAAY,CACzCD,EAAc,IACjBA,EAAc,GAEXC,EAAYhC,EAAU/H,SACzB+J,EAAYhC,EAAU/H,QAIvB+J,IAEK,IAAA,IAAIhK,IAHT+J,EAG0B/J,GAAKgK,EAAWhK,IACzC0J,EAAY1J,GAAKgI,EAAUhI,GAC3BgI,EAAUhI,GAAK,WAIZ,GAAI4J,EACL,IAAA,IAAIvP,EAAI,EAAGA,EAAI2N,EAAU/H,OAAQ5F,IACjC0O,EAAWf,EAAU3N,GAAIuP,KAC5BF,EAAYrP,GAAK2N,EAAU3N,GAAGb,MAAMoQ,EAAa3J,QACjD+H,EAAU3N,GAAK,IAab,IARD6P,IAAAA,EAA2Bb,EAAYa,yBAA2B,IAAIC,IACtEC,EAAsBxD,EAAIV,aAAa,yBACvCmE,EAAqBzD,EAAIV,aAAa,4BAMjClG,EAAI,EAAGA,EAAIgI,EAAU/H,OAAQD,IAAK,CACtC0I,IAAAA,EAAOV,EAAUhI,GAChB0I,IAKD0B,GAAuBnB,EAASP,EAAM0B,IACzCF,EAAyBjP,IAAI+E,EAAI,GAI9BA,EAAI,GAAKqK,GAAsBtB,EAAWL,EAAM2B,KACnDrC,EAAUhI,GAAK0I,EAAKlP,MAAM6Q,EAAmBpK,QAC7CiK,EAAyBjP,IAAI+E,KAI/BxC,EAAIU,KAAO8J,EAAU/E,KAAK,WA5EzBoG,EAAYE,UAAW,OARvBF,EAAYE,UAAW,IAuFzBtR,EAAMyF,MAAMzC,IAAI,gBAAiB,SAAUuC,GACtC6L,IAAAA,EAAcC,EAAmB9L,GAEjC6L,IAAAA,EAAYE,SAAZF,CAOC,IAFDrB,IAAAA,EAAYxK,EAAIa,gBAAgB4J,MAAM,MACtCyB,EAAcL,EAAYK,aAAe,GACpCrP,EAAI,EAAGiQ,EAAItC,EAAU/H,OAAQ5F,EAAIiQ,EAAGjQ,IAExCqP,EAAYxP,eAAeG,GAG9B2N,EAAU3N,GAAK,8BACZpC,EAAMO,KAAKC,OAAOiR,EAAYrP,IAAM,UAEvC2N,EAAU3N,GAAK,+BACZ2N,EAAU3N,GAAK,UAGpBmD,EAAIa,gBAAkB2J,EAAU/E,KAAK,SAGtChL,EAAMyF,MAAMzC,IAAI,WAAY,SAAUuC,GACjC,GA1II+M,SAAmB/M,GAEpB,MAAA,iBADIA,EAAIgN,KAAOhN,EAAIgN,MAAQ,IAyI7BD,CAAmB/M,GAApB,CAKA6L,IAAAA,EAAcC,EAAmB9L,GAEjC6L,IAAAA,EAAYE,SAAZF,CAIAzC,IAAAA,EAAMpJ,EAAIjD,QAAQK,cAClBkO,EAAchC,KAAKtJ,EAAIjD,QAAQG,aAClC8C,EAAIjD,QAAQG,UAAY8C,EAAIjD,QAAQG,UAAUxB,QAAQ4P,EAAe,MAEjEA,EAAchC,KAAKF,EAAIlM,aAC3BkM,EAAIlM,WAAa,iBAQd+P,IAGAC,EAHAD,EAAc,GACdE,EAAWtB,EAAYI,eAAiB,EACxCmB,EAAa1E,EAAa,cAAe,IAEzC0E,GAAe,KAAfA,EACHF,EAAa,sBAAwBE,EAAa,iBAIlDF,EAAa,oBAFFxE,EAAa,YAAa,QAEK,gBAD/BA,EAAa,YAAa,aAC8B,YAQ/D,IALDgE,IAAAA,EAA2Bb,EAAYa,0BAA4B,IAAIC,IAEvEU,EAAyB,mCADA3E,EAAa,2BAA4B,KACqB,YAGlFlG,EAAI,EAAGA,EAAI2K,EAAU3K,IACzBkK,EAAyBY,IAAI9K,GAChCyK,GAAeI,EAEfJ,GAAeC,EAKbK,IAAAA,EAAS5P,SAASgM,cAAc,QACpC4D,EAAOrQ,UArNW,sBAsNlBqQ,EAAOzM,UAAYmM,EAId,IADDf,IAAAA,EAAcL,EAAYK,aAAe,GACpCrP,EAAI,EAAGiQ,EAAIZ,EAAYzJ,OAAQ5F,EAAIiQ,EAAGjQ,IAC1CqP,GAAAA,EAAYxP,eAAeG,GAAI,CAC9B4H,IAAAA,EAAO8I,EAAO3E,SAAS/L,GAC3B4H,EAAK+I,gBAAgB,aACrB/I,EAAK+I,gBAAgB,aACrB/I,EAAK+I,gBAAgB,eAIvBxN,EAAIjD,QAAQ8B,aAAa0O,EAAQvN,EAAIjD,QAAQ0Q,YAC7C5B,EAAYE,UAAW,GA/CdrD,SAAAA,EAAajM,EAAKiR,GACnB,OAACtE,EAAIV,aAAajM,IAAQiR,GAAchS,QAAQ,KAAM,YA/ItDoQ,SAAAA,EAAmB9L,GACvBgN,IAAAA,EAAOhN,EAAIgN,KAAOhN,EAAIgN,MAAQ,GAC3BA,OAAAA,EAAK,gBAAkBA,EAAK,iBAAmB,IAhDvD","file":"prism.ba4021b1.js","sourceRoot":"..","sourcesContent":["/* PrismJS 1.28.0\nhttps://prismjs.com/download.html#themes=prism-tomorrow&languages=markup+clike+bash+java&plugins=line-numbers+command-line */\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n;\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n(function (Prism) {\n\t// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n\t// + LC_ALL, RANDOM, REPLY, SECONDS.\n\t// + make sure PS1..4 are here as they are not always set,\n\t// - some useless things.\n\tvar envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n\n\tvar commandAfterHeredoc = {\n\t\tpattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation', // this looks reasonably well in all themes\n\t\tinside: null // see below\n\t};\n\n\tvar insideString = {\n\t\t'bash': commandAfterHeredoc,\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': [\n\t\t\t// [0]: Arithmetic Environment\n\t\t\t{\n\t\t\t\tpattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t// If there is a $ sign at the beginning highlight $(( and )) as variable\n\t\t\t\t\t'variable': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/^\\$\\(\\(/\n\t\t\t\t\t],\n\t\t\t\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n\t\t\t\t\t// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n\t\t\t\t\t'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n\t\t\t\t\t// If there is no $ sign at the beginning highlight (( and )) as punctuation\n\t\t\t\t\t'punctuation': /\\(\\(?|\\)\\)?|,|;/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [1]: Command Substitution\n\t\t\t{\n\t\t\t\tpattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'variable': /^\\$\\(|^`|\\)$|`$/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [2]: Brace expansion\n\t\t\t{\n\t\t\t\tpattern: /\\$\\{[^}]+\\}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n\t\t\t\t\t'punctuation': /[\\[\\]]/,\n\t\t\t\t\t'environment': {\n\t\t\t\t\t\tpattern: RegExp('(\\\\{)' + envVars),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: 'constant'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t/\\$(?:\\w+|[#?*!@$])/\n\t\t],\n\t\t// Escape sequences from echo and printf's manuals, and escaped quotes.\n\t\t'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n\t};\n\n\tPrism.languages.bash = {\n\t\t'shebang': {\n\t\t\tpattern: /^#!\\s*\\/.*/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\"{\\\\$])#.*/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'function-name': [\n\t\t\t// a) function foo {\n\t\t\t// b) foo() {\n\t\t\t// c) function foo() {\n\t\t\t// but not “foo {”\n\t\t\t{\n\t\t\t\t// a) and c)\n\t\t\t\tpattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'function'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// b)\n\t\t\t\tpattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n\t\t\t\talias: 'function'\n\t\t\t}\n\t\t],\n\t\t// Highlight variable names as variables in for and select beginnings.\n\t\t'for-or-select': {\n\t\t\tpattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t// Highlight variable names as variables in the left-hand part\n\t\t// of assignments (“=” and “+=”).\n\t\t'assign-left': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()\\w+(?:\\.\\w+)*(?=\\+?=)/,\n\t\t\tinside: {\n\t\t\t\t'environment': {\n\t\t\t\t\tpattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'constant'\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t// Highlight parameter names as variables\n\t\t'parameter': {\n\t\t\tpattern: /(^|\\s)-{1,2}(?:\\w+:[+-]?)?\\w+(?:\\.\\w+)*(?=[=\\s]|$)/,\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': [\n\t\t\t// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t// Here-document with quotes around the tag\n\t\t\t// → No expansion (so no “inside”).\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'bash': commandAfterHeredoc\n\t\t\t\t}\n\t\t\t},\n\t\t\t// “Normal” string\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n\t\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n\t\t\t\tpattern: /(^|[^$\\\\])'[^']*'/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n\t\t\t\tpattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'entity': insideString.entity\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$?' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': insideString.variable,\n\t\t'function': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n\t\t'builtin': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true,\n\t\t\t// Alias added to make those easier to distinguish from strings.\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'file-descriptor': {\n\t\t\tpattern: /\\B&\\d\\b/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'operator': {\n\t\t\t// Lots of redirections here, but not just that.\n\t\t\tpattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n\t\t\tinside: {\n\t\t\t\t'file-descriptor': {\n\t\t\t\t\tpattern: /^\\d/,\n\t\t\t\t\talias: 'important'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n\t\t'number': {\n\t\t\tpattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n\t\t\tlookbehind: true\n\t\t}\n\t};\n\n\tcommandAfterHeredoc.inside = Prism.languages.bash;\n\n\t/* Patterns in command substitution. */\n\tvar toBeCopied = [\n\t\t'comment',\n\t\t'function-name',\n\t\t'for-or-select',\n\t\t'assign-left',\n\t\t'parameter',\n\t\t'string',\n\t\t'environment',\n\t\t'function',\n\t\t'keyword',\n\t\t'builtin',\n\t\t'boolean',\n\t\t'file-descriptor',\n\t\t'operator',\n\t\t'punctuation',\n\t\t'number'\n\t];\n\tvar inside = insideString.variable[1].inside;\n\tfor (var i = 0; i < toBeCopied.length; i++) {\n\t\tinside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n\t}\n\n\tPrism.languages.shell = Prism.languages.bash;\n}(Prism));\n\n(function (Prism) {\n\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n\t// full package (optional) + parent classes (optional)\n\tvar classNamePrefix = /(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n\t// based on the java naming conventions\n\tvar className = {\n\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'namespace': {\n\t\t\t\tpattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /\\./\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\./\n\t\t}\n\t};\n\n\tPrism.languages.java = Prism.languages.extend('clike', {\n\t\t'string': {\n\t\t\tpattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'class-name': [\n\t\t\tclassName,\n\t\t\t{\n\t\t\t\t// variables, parameters, and constructor references\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(^|[^\\w.])/.source + classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()]|\\s*(?:\\[[\\s,]*\\]\\s*)?::\\s*new\\b)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t},\n\t\t\t{\n\t\t\t\t// class names based on keyword\n\t\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t\tpattern: RegExp(/(\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\s+)/.source + classNamePrefix + /[A-Z]\\w*\\b/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: className.inside\n\t\t\t}\n\t\t],\n\t\t'keyword': keywords,\n\t\t'function': [\n\t\t\tPrism.languages.clike.function,\n\t\t\t{\n\t\t\t\tpattern: /(::\\s*)[a-z_]\\w*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'string', {\n\t\t'triple-quoted-string': {\n\t\t\t// http://openjdk.java.net/jeps/355#Description\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'class-name', {\n\t\t'annotation': {\n\t\t\tpattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t},\n\t\t'import': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+)/.source + classNamePrefix + /(?:[A-Z]\\w*|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(\\bimport\\s+static\\s+)/.source + classNamePrefix + /(?:\\w+|\\*)(?=\\s*;)/.source),\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'static',\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': className.inside.namespace,\n\t\t\t\t\t'static': /\\b\\w+$/,\n\t\t\t\t\t'punctuation': /\\./,\n\t\t\t\t\t'operator': /\\*/,\n\t\t\t\t\t'class-name': /\\w+/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'namespace': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./,\n\t\t\t}\n\t\t}\n\t});\n}(Prism));\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t/**\n\t * Plugin name which is used as a class name for <pre> which is activating the plugin\n\t *\n\t * @type {string}\n\t */\n\tvar PLUGIN_NAME = 'line-numbers';\n\n\t/**\n\t * Regular expression used for determining line breaks\n\t *\n\t * @type {RegExp}\n\t */\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\n\t/**\n\t * Global exports\n\t */\n\tvar config = Prism.plugins.lineNumbers = {\n\t\t/**\n\t\t * Get node for provided line number\n\t\t *\n\t\t * @param {Element} element pre element\n\t\t * @param {number} number line number\n\t\t * @returns {Element|undefined}\n\t\t */\n\t\tgetLine: function (element, number) {\n\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');\n\t\t\tif (!lineNumberRows) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n\t\t\tif (number < lineNumberStart) {\n\t\t\t\tnumber = lineNumberStart;\n\t\t\t}\n\t\t\tif (number > lineNumberEnd) {\n\t\t\t\tnumber = lineNumberEnd;\n\t\t\t}\n\n\t\t\tvar lineIndex = number - lineNumberStart;\n\n\t\t\treturn lineNumberRows.children[lineIndex];\n\t\t},\n\n\t\t/**\n\t\t * Resizes the line numbers of the given element.\n\t\t *\n\t\t * This function will not add line numbers. It will only resize existing ones.\n\t\t *\n\t\t * @param {HTMLElement} element A `<pre>` element with line numbers.\n\t\t * @returns {void}\n\t\t */\n\t\tresize: function (element) {\n\t\t\tresizeElements([element]);\n\t\t},\n\n\t\t/**\n\t\t * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n\t\t * the current viewport.\n\t\t *\n\t\t * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n\t\t *\n\t\t * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tassumeViewportIndependence: true\n\t};\n\n\t/**\n\t * Resizes the given elements.\n\t *\n\t * @param {HTMLElement[]} elements\n\t */\n\tfunction resizeElements(elements) {\n\t\telements = elements.filter(function (e) {\n\t\t\tvar codeStyles = getStyles(e);\n\t\t\tvar whiteSpace = codeStyles['white-space'];\n\t\t\treturn whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n\t\t});\n\n\t\tif (elements.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar infos = elements.map(function (element) {\n\t\t\tvar codeElement = element.querySelector('code');\n\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\t\t\tif (!codeElement || !lineNumbersWrapper) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t/** @type {HTMLElement} */\n\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');\n\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n\t\t\tif (!lineNumberSizer) {\n\t\t\t\tlineNumberSizer = document.createElement('span');\n\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';\n\n\t\t\t\tcodeElement.appendChild(lineNumberSizer);\n\t\t\t}\n\n\t\t\tlineNumberSizer.innerHTML = '0';\n\t\t\tlineNumberSizer.style.display = 'block';\n\n\t\t\tvar oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\treturn {\n\t\t\t\telement: element,\n\t\t\t\tlines: codeLines,\n\t\t\t\tlineHeights: [],\n\t\t\t\toneLinerHeight: oneLinerHeight,\n\t\t\t\tsizer: lineNumberSizer,\n\t\t\t};\n\t\t}).filter(Boolean);\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lines = info.lines;\n\t\t\tvar lineHeights = info.lineHeights;\n\t\t\tvar oneLinerHeight = info.oneLinerHeight;\n\n\t\t\tlineHeights[lines.length - 1] = undefined;\n\t\t\tlines.forEach(function (line, index) {\n\t\t\t\tif (line && line.length > 1) {\n\t\t\t\t\tvar e = lineNumberSizer.appendChild(document.createElement('span'));\n\t\t\t\t\te.style.display = 'block';\n\t\t\t\t\te.textContent = line;\n\t\t\t\t} else {\n\t\t\t\t\tlineHeights[index] = oneLinerHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lineHeights = info.lineHeights;\n\n\t\t\tvar childIndex = 0;\n\t\t\tfor (var i = 0; i < lineHeights.length; i++) {\n\t\t\t\tif (lineHeights[i] === undefined) {\n\t\t\t\t\tlineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar wrapper = info.element.querySelector('.line-numbers-rows');\n\n\t\t\tlineNumberSizer.style.display = 'none';\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\tinfo.lineHeights.forEach(function (height, lineNumber) {\n\t\t\t\twrapper.children[lineNumber].style.height = height + 'px';\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns style declarations for the element\n\t *\n\t * @param {Element} element\n\t */\n\tfunction getStyles(element) {\n\t\tif (!element) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n\t}\n\n\tvar lastWidth = undefined;\n\twindow.addEventListener('resize', function () {\n\t\tif (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n\t\t\treturn;\n\t\t}\n\t\tlastWidth = window.innerWidth;\n\n\t\tresizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!env.code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar code = /** @type {Element} */ (env.element);\n\t\tvar pre = /** @type {HTMLElement} */ (code.parentNode);\n\n\t\t// works only for <code> wrapped inside <pre> (not inline)\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if line numbers already exists\n\t\tif (code.querySelector('.line-numbers-rows')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\t\tif (!Prism.util.isActive(code, PLUGIN_NAME)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the class 'line-numbers' from the <code>\n\t\tcode.classList.remove(PLUGIN_NAME);\n\t\t// Add the class 'line-numbers' to the <pre>\n\t\tpre.classList.add(PLUGIN_NAME);\n\n\t\tvar match = env.code.match(NEW_LINE_EXP);\n\t\tvar linesNum = match ? match.length + 1 : 1;\n\t\tvar lineNumbersWrapper;\n\n\t\tvar lines = new Array(linesNum + 1).join('<span></span>');\n\n\t\tlineNumbersWrapper = document.createElement('span');\n\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\t\tlineNumbersWrapper.className = 'line-numbers-rows';\n\t\tlineNumbersWrapper.innerHTML = lines;\n\n\t\tif (pre.hasAttribute('data-start')) {\n\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t\t}\n\n\t\tenv.element.appendChild(lineNumbersWrapper);\n\n\t\tresizeElements([pre]);\n\n\t\tPrism.hooks.run('line-numbers', env);\n\t});\n\n\tPrism.hooks.add('line-numbers', function (env) {\n\t\tenv.plugins = env.plugins || {};\n\t\tenv.plugins.lineNumbers = true;\n\t});\n\n}());\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\tvar CLASS_PATTERN = /(?:^|\\s)command-line(?:\\s|$)/;\n\tvar PROMPT_CLASS = 'command-line-prompt';\n\n\t/** @type {(str: string, prefix: string) => boolean} */\n\tvar startsWith = ''.startsWith\n\t\t? function (s, p) { return s.startsWith(p); }\n\t\t: function (s, p) { return s.indexOf(p) === 0; };\n\n\t// Support for IE11 that has no endsWith()\n\t/** @type {(str: string, suffix: string) => boolean} */\n\tvar endsWith = ''.endsWith\n\t\t? function (str, suffix) {\n\t\t\treturn str.endsWith(suffix);\n\t\t}\n\t\t: function (str, suffix) {\n\t\t\tvar len = str.length;\n\t\t\treturn str.substring(len - suffix.length, len) === suffix;\n\t\t};\n\n\t/**\n\t * Returns whether the given hook environment has a command line info object.\n\t *\n\t * @param {any} env\n\t * @returns {boolean}\n\t */\n\tfunction hasCommandLineInfo(env) {\n\t\tvar vars = env.vars = env.vars || {};\n\t\treturn 'command-line' in vars;\n\t}\n\t/**\n\t * Returns the command line info object from the given hook environment.\n\t *\n\t * @param {any} env\n\t * @returns {CommandLineInfo}\n\t *\n\t * @typedef CommandLineInfo\n\t * @property {boolean} [complete]\n\t * @property {number} [numberOfLines]\n\t * @property {string[]} [outputLines]\n\t */\n\tfunction getCommandLineInfo(env) {\n\t\tvar vars = env.vars = env.vars || {};\n\t\treturn vars['command-line'] = vars['command-line'] || {};\n\t}\n\n\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\tvar commandLine = getCommandLineInfo(env);\n\n\t\tif (commandLine.complete || !env.code) {\n\t\t\tcommandLine.complete = true;\n\t\t\treturn;\n\t\t}\n\n\t\t// Works only for <code> wrapped inside <pre> (not inline).\n\t\tvar pre = env.element.parentElement;\n\t\tif (!pre || !/pre/i.test(pre.nodeName) || // Abort only if neither the <pre> nor the <code> have the class\n\t\t\t(!CLASS_PATTERN.test(pre.className) && !CLASS_PATTERN.test(env.element.className))) {\n\t\t\tcommandLine.complete = true;\n\t\t\treturn;\n\t\t}\n\n\t\t// The element might be highlighted multiple times, so we just remove the previous prompt\n\t\tvar existingPrompt = env.element.querySelector('.' + PROMPT_CLASS);\n\t\tif (existingPrompt) {\n\t\t\texistingPrompt.remove();\n\t\t}\n\n\t\tvar codeLines = env.code.split('\\n');\n\n\t\tcommandLine.numberOfLines = codeLines.length;\n\t\t/** @type {string[]} */\n\t\tvar outputLines = commandLine.outputLines = [];\n\n\t\tvar outputSections = pre.getAttribute('data-output');\n\t\tvar outputFilter = pre.getAttribute('data-filter-output');\n\t\tif (outputSections !== null) { // The user specified the output lines. -- cwells\n\t\t\toutputSections.split(',').forEach(function (section) {\n\t\t\t\tvar range = section.split('-');\n\t\t\t\tvar outputStart = parseInt(range[0], 10);\n\t\t\t\tvar outputEnd = range.length === 2 ? parseInt(range[1], 10) : outputStart;\n\n\t\t\t\tif (!isNaN(outputStart) && !isNaN(outputEnd)) {\n\t\t\t\t\tif (outputStart < 1) {\n\t\t\t\t\t\toutputStart = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (outputEnd > codeLines.length) {\n\t\t\t\t\t\toutputEnd = codeLines.length;\n\t\t\t\t\t}\n\t\t\t\t\t// Convert start and end to 0-based to simplify the arrays. -- cwells\n\t\t\t\t\toutputStart--;\n\t\t\t\t\toutputEnd--;\n\t\t\t\t\t// Save the output line in an array and clear it in the code so it's not highlighted. -- cwells\n\t\t\t\t\tfor (var j = outputStart; j <= outputEnd; j++) {\n\t\t\t\t\t\toutputLines[j] = codeLines[j];\n\t\t\t\t\t\tcodeLines[j] = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (outputFilter) { // Treat lines beginning with this string as output. -- cwells\n\t\t\tfor (var i = 0; i < codeLines.length; i++) {\n\t\t\t\tif (startsWith(codeLines[i], outputFilter)) { // This line is output. -- cwells\n\t\t\t\t\toutputLines[i] = codeLines[i].slice(outputFilter.length);\n\t\t\t\t\tcodeLines[i] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar continuationLineIndicies = commandLine.continuationLineIndicies = new Set();\n\t\tvar lineContinuationStr = pre.getAttribute('data-continuation-str');\n\t\tvar continuationFilter = pre.getAttribute('data-filter-continuation');\n\n\t\t// Identify code lines where the command has continued onto subsequent\n\t\t// lines and thus need a different prompt. Need to do this after the output\n\t\t// lines have been removed to ensure we don't pick up a continuation string\n\t\t// in an output line.\n\t\tfor (var j = 0; j < codeLines.length; j++) {\n\t\t\tvar line = codeLines[j];\n\t\t\tif (!line) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Record the next line as a continuation if this one ends in a continuation str.\n\t\t\tif (lineContinuationStr && endsWith(line, lineContinuationStr)) {\n\t\t\t\tcontinuationLineIndicies.add(j + 1);\n\t\t\t}\n\t\t\t// Record this line as a continuation if marked with a continuation prefix\n\t\t\t// (that we will remove).\n\t\t\tif (j > 0 && continuationFilter && startsWith(line, continuationFilter)) {\n\t\t\t\tcodeLines[j] = line.slice(continuationFilter.length);\n\t\t\t\tcontinuationLineIndicies.add(j);\n\t\t\t}\n\t\t}\n\n\t\tenv.code = codeLines.join('\\n');\n\t});\n\n\tPrism.hooks.add('before-insert', function (env) {\n\t\tvar commandLine = getCommandLineInfo(env);\n\n\t\tif (commandLine.complete) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Reinsert the output lines into the highlighted code. -- cwells\n\t\tvar codeLines = env.highlightedCode.split('\\n');\n\t\tvar outputLines = commandLine.outputLines || [];\n\t\tfor (var i = 0, l = codeLines.length; i < l; i++) {\n\t\t\t// Add spans to allow distinction of input/output text for styling\n\t\t\tif (outputLines.hasOwnProperty(i)) {\n\t\t\t\t// outputLines were removed from codeLines so missed out on escaping\n\t\t\t\t// of markup so do it here.\n\t\t\t\tcodeLines[i] = '<span class=\"token output\">'\n\t\t\t\t\t+ Prism.util.encode(outputLines[i]) + '</span>';\n\t\t\t} else {\n\t\t\t\tcodeLines[i] = '<span class=\"token command\">'\n\t\t\t\t\t+ codeLines[i] + '</span>';\n\t\t\t}\n\t\t}\n\t\tenv.highlightedCode = codeLines.join('\\n');\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!hasCommandLineInfo(env)) {\n\t\t\t// the previous hooks never ran\n\t\t\treturn;\n\t\t}\n\n\t\tvar commandLine = getCommandLineInfo(env);\n\n\t\tif (commandLine.complete) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar pre = env.element.parentElement;\n\t\tif (CLASS_PATTERN.test(env.element.className)) { // Remove the class \"command-line\" from the <code>\n\t\t\tenv.element.className = env.element.className.replace(CLASS_PATTERN, ' ');\n\t\t}\n\t\tif (!CLASS_PATTERN.test(pre.className)) { // Add the class \"command-line\" to the <pre>\n\t\t\tpre.className += ' command-line';\n\t\t}\n\n\t\tfunction getAttribute(key, defaultValue) {\n\t\t\treturn (pre.getAttribute(key) || defaultValue).replace(/\"/g, '&quot');\n\t\t}\n\n\t\t// Create the \"rows\" that will become the command-line prompts. -- cwells\n\t\tvar promptLines = '';\n\t\tvar rowCount = commandLine.numberOfLines || 0;\n\t\tvar promptText = getAttribute('data-prompt', '');\n\t\tvar promptLine;\n\t\tif (promptText !== '') {\n\t\t\tpromptLine = '<span data-prompt=\"' + promptText + '\"></span>';\n\t\t} else {\n\t\t\tvar user = getAttribute('data-user', 'user');\n\t\t\tvar host = getAttribute('data-host', 'localhost');\n\t\t\tpromptLine = '<span data-user=\"' + user + '\" data-host=\"' + host + '\"></span>';\n\t\t}\n\n\t\tvar continuationLineIndicies = commandLine.continuationLineIndicies || new Set();\n\t\tvar continuationPromptText = getAttribute('data-continuation-prompt', '>');\n\t\tvar continuationPromptLine = '<span data-continuation-prompt=\"' + continuationPromptText + '\"></span>';\n\n\t\t// Assemble all the appropriate prompt/continuation lines\n\t\tfor (var j = 0; j < rowCount; j++) {\n\t\t\tif (continuationLineIndicies.has(j)) {\n\t\t\t\tpromptLines += continuationPromptLine;\n\t\t\t} else {\n\t\t\t\tpromptLines += promptLine;\n\t\t\t}\n\t\t}\n\n\t\t// Create the wrapper element. -- cwells\n\t\tvar prompt = document.createElement('span');\n\t\tprompt.className = PROMPT_CLASS;\n\t\tprompt.innerHTML = promptLines;\n\n\t\t// Remove the prompt from the output lines. -- cwells\n\t\tvar outputLines = commandLine.outputLines || [];\n\t\tfor (var i = 0, l = outputLines.length; i < l; i++) {\n\t\t\tif (outputLines.hasOwnProperty(i)) {\n\t\t\t\tvar node = prompt.children[i];\n\t\t\t\tnode.removeAttribute('data-user');\n\t\t\t\tnode.removeAttribute('data-host');\n\t\t\t\tnode.removeAttribute('data-prompt');\n\t\t\t}\n\t\t}\n\n\t\tenv.element.insertBefore(prompt, env.element.firstChild);\n\t\tcommandLine.complete = true;\n\t});\n\n}());\n\n"]}